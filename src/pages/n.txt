Transfer.jsx:
import React, { useState } from 'react';
import {
    LayoutDashboard,
    Send,
    PlusCircle,
    CreditCard,
    Receipt,
    Target,
    Clock,
    Download,
    Headphones,
    Settings,
    Bell,
    ChevronDown,
    ArrowLeft,
    Users,
    Building2,
    Zap,
    ShieldCheck,
    CheckCircle,
    XCircle,
    Info,
    MoreHorizontal,
    Share2,
    Menu
} from 'lucide-react';
import '../styles/transfer.css';
import Header from '../layouts/Header';
import Mobile from '../layouts/Mobile';
import Sidebar from '../layouts/Sidebar';
import { decryptData } from '../utils/crypto';
import { Cookies } from 'react-cookie';
import PaynixTransferForm from '../components/Transfer/PaynixTransferForm';
import ExternalTransferForm from '../components/Transfer/ExternalTransferForm';
import { useAlert } from '../context/AlertContext';
import formatMoney from '../utils/formatMoney';
import axiosInstance from '../api/axiosInstance';
import generateRef from '../utils/generateRef';

const Transfer = () => {
    const { showAlert } = useAlert();
    const [selectedTransferType, setSelectedTransferType] = useState('');
    const [currentStep, setCurrentStep] = useState(1);
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const [confirmationDetails, setConfirmationDetails] = useState(null);

    const toggleSidebar = () => {
        setIsSidebarOpen(!isSidebarOpen);
    };

    const selectTransferType = (type) => {
        setSelectedTransferType(type);
        setCurrentStep(2);
        setTimeout(() => {
            document.getElementById('transfer-form')?.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }, 300);
    };

    const closeConfirmationModal = () => {
        setConfirmationDetails(null);
        setCurrentStep(2);
    };

    const executeTransfer = () => {
        showAlert('Processing transfer...', 'info');

        if (confirmationDetails?.type === 'paynix') {
            const payload = {
                accountno: confirmationDetails.recipient,
                amount: confirmationDetails.amount,
                ref: generateRef(),
                desc: confirmationDetails.description || null
            };

            axiosInstance
                .post('/transfer/paynix', payload)
                .then((response) => {
                    const res = response.data;
                    if (res.code === 200) {
                        fetchBankDetails();
                        showSuccessModal();
                    } else {
                        showAlert('Transfer failed: ' + res.message, 'error');
                    }
                })
                .catch((error) => {
                    const errRes = error.response?.data || {};
                    const message = errRes.message || 'Something went wrong. Please try again.';
                    showAlert(message, 'error');
                })
                .finally(() => {
                    setConfirmationDetails(null);
                });
        } else {
            // Handle external transfer (mock for now as not specified)
            setTimeout(() => {
                showSuccessModal();
            }, 2000);
        }
    };

    const showSuccessModal = () => {
        showAlert('Transfer completed successfully!', 'success');
        document.getElementById('success-modal').classList.remove('hidden');
    };

    const goBack = () => {
        if (currentStep > 1) {
            setCurrentStep(1);
            setSelectedTransferType('');
        } else {
            showAlert('Going back to dashboard...', 'info');
        }
    };

    const downloadReceipt = () => {
        showAlert('Receipt downloaded successfully', 'success');
    };

    const shareReceipt = () => {
        showAlert('Share options opened', 'info');
    };

    const goToTransactions = () => {
        document.getElementById('success-modal').classList.add('hidden');
        showAlert('Navigating to transactions...', 'info');
    };

    const handleProceed = (details) => {
        setConfirmationDetails(details);
        setCurrentStep(3);
    };

    return (
        <div className="bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 min-h-screen">
            <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
            <Mobile toggleSidebar={toggleSidebar} />
            <div className="lg:ml-64 min-h-screen main-content">
                <Header />

                <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8">
                    {/* Progress Steps */}
                    <div className="mb-8 animate-slide-up">
                        <div className="flex items-center justify-center space-x-4">
                            {[1, 2, 3].map((step) => (
                                <React.Fragment key={step}>
                                    <div
                                        className={`step-indicator flex items-center justify-center w-8 h-8 rounded-full text-sm font-semibold ${step < currentStep ? 'completed bg-[#20C997]' : step === currentStep ? 'active bg-[#1A2B4D] text-white' : 'bg-gray-200'
                                            }`}
                                    >
                                        {step}
                                    </div>
                                    {step < 3 && <div className="w-16 h-1 bg-gray-200 rounded"></div>}
                                </React.Fragment>
                            ))}
                        </div>
                        <div className="flex justify-between mt-2 text-xs text-gray-600">
                            <span>Choose Type</span>
                            <span>Enter Details</span>
                            <span>Confirm</span>
                        </div>
                    </div>

                    {/* Transfer Options */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 animate-slide-up" style={{ animationDelay: '0.1s' }}>
                        {/* Paynix Transfer */}
                        <div
                            className={`transfer-option bg-white rounded-2xl p-6 border-2 border-gray-200 ${selectedTransferType === 'paynix' ? 'active' : ''}`}
                            onClick={() => selectTransferType('paynix')}
                        >
                            <div className="flex items-center justify-between mb-4">
                                <div className="w-12 h-12 gradient-primary rounded-xl flex items-center justify-center">
                                    <Users className="w-6 h-6 text-white" />
                                </div>
                                <div className="w-6 h-6 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                    <div className={`w-3 h-3 bg-[#1A2B4D] rounded-full ${selectedTransferType === 'paynix' ? '' : 'hidden'}`} id="paynix-check"></div>
                                </div>
                            </div>
                            <h3 className="text-lg font-bold text-gray-900 mb-2">Transfer to Paynix Account</h3>
                            <p className="text-gray-600 text-sm mb-4">Send money instantly to other Paynix users using their account number or phone number</p>
                            <div className="flex items-center space-x-4 text-sm">
                                <div className="flex items-center space-x-1 text-green-600">
                                    <Zap className="w-4 h-4" />
                                    <span>Instant</span>
                                </div>
                                <div className="flex items-center space-x-1 text-blue-600">
                                    <ShieldCheck className="w-4 h-4" />
                                    <span>Free</span>
                                </div>
                            </div>
                        </div>

                        {/* External Bank Transfer */}
                        <div
                            className={`transfer-option bg-white rounded-2xl p-6 border-2 border-gray-200 ${selectedTransferType === 'external' ? 'active' : ''}`}
                            onClick={() => selectTransferType('external')}
                        >
                            <div className="flex items-center justify-between mb-4">
                                <div className="w-12 h-12 gradient-blue rounded-xl flex items-center justify-center">
                                    <Building2 className="w-6 h-6 text-white" />
                                </div>
                                <div className="w-6 h-6 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                    <div className={`w-3 h-3 bg-[#1A2B4D] rounded-full ${selectedTransferType === 'external' ? '' : 'hidden'}`} id="external-check"></div>
                                </div>
                            </div>
                            <h3 className="text-lg font-bold text-gray-900 mb-2">Transfer to Other Banks</h3>
                            <p className="text-gray-600 text-sm mb-4">Send money to accounts in other Nigerian banks using account number</p>
                            <div className="flex items-center space-x-4 text-sm">
                                <div className="flex items-center space-x-1 text-orange-600">
                                    <Clock className="w-4 h-4" />
                                    <span>5-10 mins</span>
                                </div>
                                <div className="flex items-center space-x-1 text-purple-600">
                                    <CreditCard className="w-4 h-4" />
                                    <span>â‚¦25 fee</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Transfer Form */}
                    <div id="transfer-form" className={`${selectedTransferType ? '' : 'hidden'}`}>
                        {selectedTransferType === 'paynix' && (
                            <PaynixTransferForm onProceed={handleProceed} onCancel={goBack} />
                        )}
                        {selectedTransferType === 'external' && (
                            <ExternalTransferForm onProceed={handleProceed} onCancel={goBack} />
                        )}
                    </div>

                    {/* Confirmation Modal */}
                    <div id="confirmation-modal" className={`${confirmationDetails ? '' : 'hidden'} fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4`}>
                        <div className="bg-white rounded-2xl max-w-md w-full p-6">
                            <div className="text-center mb-6">
                                <div className="w-16 h-16 gradient-primary rounded-full flex items-center justify-center mx-auto mb-4">
                                    <Send className="w-8 h-8 text-white" />
                                </div>
                                <h3 className="text-xl font-bold text-gray-900 mb-2">Confirm Transfer</h3>
                                <p className="text-gray-600">Please review your transfer details</p>
                            </div>
                            <div id="confirmation-details" className="space-y-4 mb-6">
                                {confirmationDetails?.type === 'paynix' ? (
                                    <div className="bg-gray-50 rounded-xl p-4">
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">To:</span>
                                            <span className="font-semibold">{confirmationDetails.recipient}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Name:</span>
                                            <span className="font-semibold">{confirmationDetails.accountName}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Amount:</span>
                                            <span className="font-semibold">{formatMoney(confirmationDetails.amount || 0)}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Fee:</span>
                                            <span className="font-semibold text-green-600">Free</span>
                                        </div>
                                        {confirmationDetails.description && (
                                            <div className="flex justify-between mb-2">
                                                <span className="text-gray-600">Description:</span>
                                                <span className="font-semibold">{confirmationDetails.description}</span>
                                            </div>
                                        )}
                                        <div className="border-t border-gray-200 mt-2 pt-2 flex justify-between">
                                            <span className="font-bold text-gray-900">Total:</span>
                                            <span className="font-bold text-[#1A2B4D]">
                                                {formatMoney(confirmationDetails.amount || 0)}
                                            </span>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="bg-gray-50 rounded-xl p-4">
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Bank:</span>
                                            <span className="font-semibold">{confirmationDetails?.bank?.toUpperCase()}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Account:</span>
                                            <span className="font-semibold">{confirmationDetails?.accountNumber}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Name:</span>
                                            <span className="font-semibold">{confirmationDetails?.accountName}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Amount:</span>
                                            <span className="font-semibold">{formatMoney(confirmationDetails?.amount || 0)}</span>
                                        </div>
                                        <div className="flex justify-between mb-2">
                                            <span className="text-gray-600">Fee:</span>
                                            <span className="font-semibold text-orange-600">{formatMoney(confirmationDetails?.fee || 0)}</span>
                                        </div>
                                        {confirmationDetails?.narration && (
                                            <div className="flex justify-between mb-2">
                                                <span className="text-gray-600">Narration:</span>
                                                <span className="font-semibold">{confirmationDetails.narration}</span>
                                            </div>
                                        )}
                                        <div className="border-t border-gray-200 mt-2 pt-2 flex justify-between">
                                            <span className="font-bold text-gray-900">Total:</span>
                                            <span className="font-bold text-[#1A2B4D]">
                                                {formatMoney((confirmationDetails?.amount + confirmationDetails?.fee) || 0)}
                                            </span>
                                        </div>
                                    </div>
                                )}
                            </div>
                            <div className="flex space-x-4">
                                <button
                                    onClick={closeConfirmationModal}
                                    className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors"
                                >
                                    Cancel
                                </button>
                                <button
                                    onClick={executeTransfer}
                                    className="flex-1 gradient-primary text-white px-6 py-3 rounded-xl font-semibold hover:opacity-90 transition-opacity"
                                >
                                    Send Money
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Success Modal */}
                    <div id="success-modal" className="hidden fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
                        <div className="bg-white rounded-2xl max-w-md w-full p-6 text-center">
                            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <CheckCircle className="w-8 h-8 text-green-600" />
                            </div>
                            <h3 className="text-xl font-bold text-gray-900 mb-2">Transfer Successful!</h3>
                            <p className="text-gray-600 mb-6" id="success-message">
                                {selectedTransferType === 'paynix'
                                    ? 'Your money has been sent to the Paynix account instantly!'
                                    : 'Your transfer has been sent and will be processed within 5-10 minutes.'}
                            </p>
                            <div className="space-y-3 mb-6">
                                <button
                                    onClick={downloadReceipt}
                                    className="w-full bg-gray-100 text-gray-700 px-6 py-3 rounded-xl font-semibold hover:bg-gray-200 transition-colors flex items-center justify-center space-x-2"
                                >
                                    <Download className="w-5 h-5" />
                                    <span>Download Receipt</span>
                                </button>
                                <button
                                    onClick={shareReceipt}
                                    className="w-full border border-gray-300 text-gray-700 px-6 py-3 rounded-xl font-semibold hover:bg-gray-50 transition-colors flex items-center justify-center space-x-2"
                                >
                                    <Share2 className="w-5 h-5" />
                                    <span>Share Receipt</span>
                                </button>
                            </div>
                            <button
                                onClick={goToTransactions}
                                className="w-full gradient-primary text-white px-6 py-3 rounded-xl font-semibold hover:opacity-90 transition-opacity"
                            >
                                View Transactions
                            </button>
                        </div>
                    </div>
                </main>
            </div>
        </div>
    );
};

export default Transfer;


PaynixTransferForm.jsx:
import React, { useState, useEffect } from 'react';
import { useAlert } from '../../context/AlertContext';
import axiosInstance from '../../api/axiosInstance';
import { Loader2, X } from 'lucide-react';
import formatMoney from '../../utils/formatMoney';
import { useGlobal } from '../../context/UseGlobal';
import generateRef from '../../utils/generateRef';

const PaynixTransferForm = ({ onProceed, onCancel }) => {
    const { showAlert } = useAlert();
    const { bankDetails } = useGlobal();
    const [recipient, setRecipient] = useState('');
    const [accountName, setAccountName] = useState('');
    const [isVerified, setIsVerified] = useState(false);
    const [isVerifying, setIsVerifying] = useState(false);
    const [amount, setAmount] = useState('');
    const [description, setDescription] = useState('');
    const [errorMessage, setErrorMessage] = useState('');

    // PIN states
    const [showPinModal, setShowPinModal] = useState(false);
    const [pin, setPin] = useState(['', '', '', '']);
    const [isProcessingPayment, setIsProcessingPayment] = useState(false);

    const balance = bankDetails?.balance || 0;
    const maxAmount = 1000000;

    const selectContact = (name, accountNumber) => {
        setRecipient(accountNumber);
        setAccountName(name);
        setIsVerified(true);
        setErrorMessage('');
        showAlert(`Selected contact: ${name}`, 'success');
    };

    const handleRecipientChange = (e) => {
        const value = e.target.value.replace(/\D/g, '');
        if (value.length <= 10) {
            setRecipient(value);
            setIsVerified(false);
            setAccountName('');
            setErrorMessage('');
        }
        if (value.length === 10) {
            verifyAccount(value);
        }
    };

    const verifyAccount = (accountno) => {
        if (accountno.length !== 10) {
            showAlert('Please enter a valid 10-digit account number or phone', 'error');
            setErrorMessage('Invalid account number or phone');
            return;
        }

        setIsVerifying(true);
        axiosInstance
            .post('/account/paynixuser', { accountno: accountno })
            .then((response) => {
                const res = response.data;
                const { code, message, data } = res;
                if (code === 200) {
                    setAccountName(data.name);
                    setIsVerified(true);
                    showAlert('Account verified successfully', 'success');
                    setErrorMessage('');
                } else {
                    showAlert('Account verification failed', 'error');
                    setIsVerified(false);
                    setErrorMessage('Account verification failed');
                }
            })
            .catch((error) => {
                const errRes = error.response?.data || {};
                const message = errRes.message || 'Something went wrong. Please try again.';
                showAlert(message, 'error');
                setIsVerified(false);
                setErrorMessage('Something went wrong. Please try again.');
            })
            .finally(() => {
                setIsVerifying(false);
            });
    };

    const handleAmountChange = (e) => {
        const value = e.target.value;
        const parsedAmount = parseFloat(value) || 0;

        setAmount(value);

        if (parsedAmount > balance) {
            setErrorMessage('Insufficient balance');
        } else if (parsedAmount > maxAmount) {
            setErrorMessage('Amount exceeds maximum transfer limit of â‚¦1,000,000');
        } else {
            setErrorMessage('');
        }
    };

    const handleDescriptionChange = (e) => {
        setDescription(e.target.value);
    };

    // PIN handling functions
    const handlePinChange = (index, value) => {
        if (value.length <= 1 && /^\d*$/.test(value)) {
            const newPin = [...pin];
            newPin[index] = value;
            setPin(newPin);

            // Auto-focus next input
            if (value && index < 3) {
                const nextInput = document.getElementById(`pin-${index + 1}`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    const handlePinKeyDown = (index, e) => {
        if (e.key === 'Backspace' && !pin[index] && index > 0) {
            const prevInput = document.getElementById(`pin-${index - 1}`);
            if (prevInput) {
                prevInput.focus();
                const newPin = [...pin];
                newPin[index - 1] = '';
                setPin(newPin);
            }
        }
    };

    const clearPin = () => {
        setPin(['', '', '', '']);
        const firstInput = document.getElementById('pin-0');
        if (firstInput) firstInput.focus();
    };

    const isPinComplete = pin.every(digit => digit !== '');

    const proceed = () => {
        const parsedAmount = parseFloat(amount) || 0;

        if (!recipient || parsedAmount <= 0 || !isVerified) {
            showAlert('Please verify the account and fill in all required fields', 'error');
            setErrorMessage('Please verify the account and fill in all required fields');
            return;
        }

        if (parsedAmount > balance) {
            setErrorMessage('Insufficient balance');
            return;
        }

        if (parsedAmount > maxAmount) {
            setErrorMessage('Amount exceeds maximum transfer limit of â‚¦1,000,000');
            return;
        }

        // Show PIN modal
        setShowPinModal(true);
        setTimeout(() => {
            const firstInput = document.getElementById('pin-0');
            if (firstInput) firstInput.focus();
        }, 300);
    };

    const handlePinSubmit = () => {
        if (!isPinComplete) {
            showAlert('Please enter your 4-digit PIN', 'error');
            return;
        }

        setIsProcessingPayment(true);
        const pinValue = pin.join('');
        const parsedAmount = parseFloat(amount);

        const transferData = {
            type: 'paynix',
            accountno: recipient,
            ref: generateRef(),
            amount: parsedAmount,
            description: description,
            pin: pinValue,
        };

        axiosInstance.post('/transfer/paynix', transferData)
            .then((response) => {
                const { code, message, data } = response.data;

                if (code === 200) {
                    showAlert('Transfer successful!', 'success');
                    setShowPinModal(false);
                    setPin(['', '', '', '']);

                    onProceed({
                        success: true,
                        data: data,
                        ...transferData
                    });
                } else {
                    showAlert(message || 'Transfer failed', 'error');
                }
            })
            .catch((error) => {
                const errRes = error.response?.data || {};
                const errorMessage = errRes.message || 'Transfer failed. Please try again.';
                showAlert(errorMessage, 'error');

                setPin(['', '', '', '']);
                const firstInput = document.getElementById('pin-0');
                if (firstInput) firstInput.focus();
            })
            .finally(() => {
                setIsProcessingPayment(false);
            });
    };

    const closePinModal = () => {
        setShowPinModal(false);
        setPin(['', '', '', '']);
    };

    return (
        <>
            <div className="bg-white rounded-2xl shadow-sm p-6 sm:p-8 animate-slide-up" style={{ animationDelay: '0.2s' }}>
                <h3 className="text-xl font-bold text-gray-900 mb-6">Transfer to Paynix Account</h3>
                <div className="mb-6">
                    <h4 className="text-sm font-semibold text-gray-700 mb-3">Account Balance</h4>
                    <p className="text-lg font-bold text-gray-900">
                        {formatMoney(balance)}
                    </p>
                </div>
                <div className="mb-6">
                    <h4 className="text-sm font-semibold text-gray-700 mb-3">Recent Contacts</h4>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        {[
                            { name: 'Jane Smith', account: '2345678901', color: 'pink', initials: 'JS' },
                            { name: 'Mike Johnson', account: '3456789012', color: 'blue', initials: 'MJ' }
                        ].map((contact) => (
                            <div
                                key={contact.account}
                                className="recent-contact flex items-center space-x-3 p-3 border border-gray-200 rounded-xl cursor-pointer hover:bg-gray-50"
                                onClick={() => selectContact(contact.name, contact.account)}
                            >
                                <div className={`w-10 h-10 bg-${contact.color}-100 rounded-full flex items-center justify-center`}>
                                    <span className={`text-${contact.color}-600 font-semibold text-sm`}>{contact.initials}</span>
                                </div>
                                <div className="flex-1">
                                    <p className="font-semibold text-gray-900 text-sm">{contact.name}</p>
                                    <p className="text-gray-600 text-xs">{contact.account}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">Account Number / Phone</label>
                        <div className="flex items-center space-x-2">
                            <input
                                type="text"
                                id="paynix-recipient"
                                className="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none"
                                placeholder="Enter 10-digit account number or phone"
                                value={recipient}
                                onChange={handleRecipientChange}
                                maxLength={10}
                                disabled={isVerifying}
                            />
                        </div>
                        {accountName && (
                            <p className="mt-2 text-sm text-green-600">Verified: {accountName}</p>
                        )}
                    </div>
                    <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">Amount (â‚¦)</label>
                        <input
                            type="number"
                            id="paynix-amount"
                            className="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none"
                            placeholder="0.00"
                            value={amount}
                            onChange={handleAmountChange}
                            min="0"
                            step="0.01"
                        />
                        {errorMessage && (
                            <p className="mt-2 text-sm text-red-600">{errorMessage}</p>
                        )}
                    </div>
                </div>
                <div className="mt-6">
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Description (Optional)</label>
                    <textarea
                        id="paynix-description"
                        className="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none h-24 resize-none"
                        placeholder="What's this transfer for?"
                        value={description}
                        onChange={handleDescriptionChange}
                    ></textarea>
                </div>
                <div className="mt-6 p-4 bg-gray-50 rounded-xl">
                    <div className="flex justify-between text-sm mb-2">
                        <span className="text-gray-600">Transfer Amount:</span>
                        <span className="font-semibold" id="paynix-transfer-amount">
                            {formatMoney(parseFloat(amount) || 0)}
                        </span>
                    </div>
                    <div className="flex justify-between text-sm mb-2">
                        <span className="text-gray-600">Transfer Fee:</span>
                        <span className="font-semibold text-green-600">Free</span>
                    </div>
                    <div className="border-t border-gray-200 mt-2 pt-2 flex justify-between">
                        <span className="font-semibold text-gray-900">Total:</span>
                        <span className="font-bold text-[#1A2B4D]" id="paynix-total">
                            {formatMoney(parseFloat(amount) || 0)}
                        </span>
                    </div>
                </div>
                <div className="mt-8 flex space-x-4">
                    <button
                        onClick={onCancel}
                        className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors"
                    >
                        Cancel
                    </button>
                    <button
                        onClick={proceed}
                        className={`flex-1 px-6 py-3 rounded-xl font-semibold text-white ${isVerified && amount && parseFloat(amount) > 0 && parseFloat(amount) <= balance && parseFloat(amount) <= maxAmount && !isVerifying ? 'gradient-primary hover:opacity-90' : 'bg-gray-400 cursor-not-allowed'}`}
                        disabled={!isVerified || !amount || parseFloat(amount) <= 0 || parseFloat(amount) > balance || parseFloat(amount) > maxAmount || isVerifying}
                    >
                        Continue
                    </button>
                </div>
            </div>

            {/* PIN Modal - Slides up from bottom */}
            {showPinModal && (
                <div className="fixed inset-0 bg-black/50 z-50 flex items-end sm:items-center justify-center">
                    <div className="bg-white w-full sm:w-96 sm:rounded-2xl rounded-t-3xl p-6 animate-slide-up-mobile sm:animate-slide-up transform transition-transform duration-300">
                        <div className="flex items-center justify-between mb-6">
                            <h3 className="text-xl font-bold text-gray-900">Enter PIN</h3>
                            <button
                                onClick={closePinModal}
                                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                                disabled={isProcessingPayment}
                            >
                                <X className="w-5 h-5 text-gray-500" />
                            </button>
                        </div>

                        <div className="text-center mb-6">
                            <p className="text-gray-600 mb-2">Enter your 4-digit transaction PIN</p>
                            <p className="text-sm text-gray-500">
                                Transfer {formatMoney(parseFloat(amount) || 0)} to {accountName}
                            </p>
                        </div>

                        {/* PIN Input */}
                        <div className="flex justify-center space-x-4 mb-6">
                            {pin.map((digit, index) => (
                                <input
                                    key={index}
                                    id={`pin-${index}`}
                                    type="text"
                                    inputMode="numeric"
                                    maxLength={1}
                                    value={digit}
                                    onChange={(e) => handlePinChange(index, e.target.value)}
                                    onKeyDown={(e) => handlePinKeyDown(index, e)}
                                    className="w-14 h-14 text-center text-2xl font-bold border-2 border-gray-300 rounded-xl focus:border-blue-500 focus:outline-none transition-colors"
                                    disabled={isProcessingPayment}
                                />
                            ))}
                        </div>

                        {/* Keypad for mobile */}
                        <div className="grid grid-cols-3 gap-3 mb-6 sm:hidden">
                            {[1, 2, 3, 4, 5, 6, 7, 8, 9, '', 0, ''].map((num, index) => (
                                <button
                                    key={index}
                                    onClick={() => {
                                        if (num === '') return;
                                        const emptyIndex = pin.findIndex(digit => digit === '');
                                        if (emptyIndex !== -1) {
                                            handlePinChange(emptyIndex, num.toString());
                                        }
                                    }}
                                    className={`h-12 rounded-xl font-semibold text-lg ${num === ''
                                        ? 'invisible'
                                        : 'bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-900'
                                        } transition-colors`}
                                    disabled={isProcessingPayment || num === ''}
                                >
                                    {num}
                                </button>
                            ))}
                        </div>

                        <div className="flex space-x-3">
                            <button
                                onClick={clearPin}
                                className="flex-1 px-4 py-3 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors"
                                disabled={isProcessingPayment}
                            >
                                Clear
                            </button>
                            <button
                                onClick={handlePinSubmit}
                                className={`flex-2 px-6 py-3 rounded-xl font-semibold text-white transition-colors ${isPinComplete && !isProcessingPayment
                                    ? 'gradient-primary hover:opacity-90'
                                    : 'bg-gray-400 cursor-not-allowed'
                                    }`}
                                disabled={!isPinComplete || isProcessingPayment}
                            >
                                {isProcessingPayment ? (
                                    <div className="flex items-center justify-center space-x-2">
                                        <Loader2 className="w-5 h-5 animate-spin" />
                                        <span>Processing...</span>
                                    </div>
                                ) : (
                                    'Confirm Transfer'
                                )}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Account verification loader */}
            {isVerifying && (
                <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center">
                    <Loader2 className="w-12 h-12 text-white animate-spin" />
                </div>
            )}
        </>
    );
};

export default PaynixTransferForm;


prompt:
i want the paynixTransferForm to use the Tranfser tranfer/paynix but use the payload of the one in paynixTransferForm. and also also it is after they confirm payment that the pin will show and u know the rest full code.

what i mean is that the paynixTransferForm should not call /transfer/paynixe here it should use the one in transfer.jsx u get, give me the full code of both, seprate the pin into a component so i can call pin anytime anywhere